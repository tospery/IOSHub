//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let applinksTosperyCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:tospery.com") ?? "applinks:tospery.com"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupComTosperyShared = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.tospery.shared") ?? "group.com.tospery.shared"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComTosperyIoshub = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.tospery.ioshub") ?? "$(AppIdentifierPrefix)com.tospery.ioshub"
      static let appIdentifierPrefixShared = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)shared") ?? "$(AppIdentifierPrefix)shared"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `Configuration.json`.
    static let configurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "json")
    /// Resource file `Languages.json`.
    static let languagesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Languages", pathExtension: "json")
    /// Resource file `Repos#trending.json`.
    static let reposTrendingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Repos#trending", pathExtension: "json")
    /// Resource file `Simples#about.json`.
    static let simplesAboutJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Simples#about", pathExtension: "json")
    /// Resource file `Simples#personal.json`.
    static let simplesPersonalJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Simples#personal", pathExtension: "json")
    /// Resource file `Simples#profile.json`.
    static let simplesProfileJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Simples#profile", pathExtension: "json")
    /// Resource file `Users#trending.json`.
    static let usersTrendingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Users#trending", pathExtension: "json")

    /// `bundle.url(forResource: "Configuration", withExtension: "json")`
    static func configurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Languages", withExtension: "json")`
    static func languagesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languagesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Repos#trending", withExtension: "json")`
    static func reposTrendingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reposTrendingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Simples#about", withExtension: "json")`
    static func simplesAboutJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.simplesAboutJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Simples#personal", withExtension: "json")`
    static func simplesPersonalJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.simplesPersonalJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Simples#profile", withExtension: "json")`
    static func simplesProfileJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.simplesProfileJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Users#trending", withExtension: "json")`
    static func usersTrendingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.usersTrendingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 25 images.
  struct image {
    /// Image `AppLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLogo")
    /// Image `AppMascot`.
    static let appMascot = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppMascot")
    /// Image `AppSlogan`.
    static let appSlogan = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppSlogan")
    /// Image `ic_about`.
    static let ic_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about")
    /// Image `ic_blog`.
    static let ic_blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blog")
    /// Image `ic_company`.
    static let ic_company = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_company")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_feedback`.
    static let ic_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feedback")
    /// Image `ic_location`.
    static let ic_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location")
    /// Image `ic_repo_small`.
    static let ic_repo_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_repo_small")
    /// Image `ic_repo`.
    static let ic_repo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_repo")
    /// Image `ic_setting`.
    static let ic_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting")
    /// Image `ic_star`.
    static let ic_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star")
    /// Image `ic_user_default`.
    static let ic_user_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_default")
    /// Image `navbar_theme_dark`.
    static let navbar_theme_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_theme_dark")
    /// Image `navbar_theme_light`.
    static let navbar_theme_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_theme_light")
    /// Image `personal_parallax_bg`.
    static let personal_parallax_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_parallax_bg")
    /// Image `tabbar_dashboard_normal`.
    static let tabbar_dashboard_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_dashboard_normal")
    /// Image `tabbar_dashboard_selected`.
    static let tabbar_dashboard_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_dashboard_selected")
    /// Image `tabbar_event_normal`.
    static let tabbar_event_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_normal")
    /// Image `tabbar_event_selected`.
    static let tabbar_event_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_selected")
    /// Image `tabbar_personal_normal`.
    static let tabbar_personal_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_normal")
    /// Image `tabbar_personal_selected`.
    static let tabbar_personal_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_selected")
    /// Image `tabbar_stars_normal`.
    static let tabbar_stars_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_stars_normal")
    /// Image `tabbar_stars_selected`.
    static let tabbar_stars_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_stars_selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppMascot", bundle: ..., traitCollection: ...)`
    static func appMascot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appMascot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppSlogan", bundle: ..., traitCollection: ...)`
    static func appSlogan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appSlogan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_about", bundle: ..., traitCollection: ...)`
    static func ic_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_about, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blog", bundle: ..., traitCollection: ...)`
    static func ic_blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_company", bundle: ..., traitCollection: ...)`
    static func ic_company(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_company, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feedback", bundle: ..., traitCollection: ...)`
    static func ic_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location", bundle: ..., traitCollection: ...)`
    static func ic_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_repo", bundle: ..., traitCollection: ...)`
    static func ic_repo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_repo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_repo_small", bundle: ..., traitCollection: ...)`
    static func ic_repo_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_repo_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star", bundle: ..., traitCollection: ...)`
    static func ic_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_default", bundle: ..., traitCollection: ...)`
    static func ic_user_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_theme_dark", bundle: ..., traitCollection: ...)`
    static func navbar_theme_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_theme_dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_theme_light", bundle: ..., traitCollection: ...)`
    static func navbar_theme_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_theme_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personal_parallax_bg", bundle: ..., traitCollection: ...)`
    static func personal_parallax_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_parallax_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_dashboard_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_dashboard_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_dashboard_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_dashboard_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_dashboard_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_dashboard_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_event_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_event_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_stars_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_stars_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_stars_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_stars_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_stars_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_stars_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 65 localization keys.
    struct localizable {
      /// Value: Access Token
      static let accessToken = Rswift.StringResource(key: "Access Token", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Develop By Swift
      static let loginSlogan = Rswift.StringResource(key: "Login.Slogan", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Followers
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Following
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Joined on %@
      static let joinedOn = Rswift.StringResource(key: "Joined on", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Let's build from here
      static let appSlogan = Rswift.StringResource(key: "App Slogan", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Description
      static let noDescription = Rswift.StringResource(key: "No Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No blog provided
      static let noneBlog = Rswift.StringResource(key: "None.Blog", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No company provided
      static let noneCompany = Rswift.StringResource(key: "None.Company", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No description provided
      static let noneDesc = Rswift.StringResource(key: "None.Desc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No email provided
      static let noneEmail = Rswift.StringResource(key: "None.Email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No hot repository
      static let noneRepo = Rswift.StringResource(key: "None.Repo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No location provided
      static let noneLocation = Rswift.StringResource(key: "None.Location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal Access Token
      static let loginPersonalToken = Rswift.StringResource(key: "Login.Personal.Token", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Repositores
      static let repositores = Rswift.StringResource(key: "Repositores", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Since
      static let since = Rswift.StringResource(key: "Since", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 个人主页
      static let blog = Rswift.StringResource(key: "Blog", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 事件
      static let event = Rswift.StringResource(key: "Event", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 仅公开库
      static let loginPrivilegeOnlyPublic = Rswift.StringResource(key: "Login.Privilege.OnlyPublic", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 仓库访问权限选项
      static let loginPrivacyTitle = Rswift.StringResource(key: "Login.Privacy.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 使用GitHub登录
      static let loginButtonTitle = Rswift.StringResource(key: "Login.Button.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 公开库+私有库
      static let loginPrivilegeWithPrivate = Rswift.StringResource(key: "Login.Privilege.WithPrivate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 关于
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 列表为空
      static let errorSystemListIsEmptyMessage = Rswift.StringResource(key: "Error.System.ListIsEmpty.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 列表为空
      static let errorSystemListIsEmptyTitle = Rswift.StringResource(key: "Error.System.ListIsEmpty.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 反馈
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 取消
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 否
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 团队
      static let company = Rswift.StringResource(key: "Company", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 地点
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 导航错误
      static let errorSystemNavigationMessage = Rswift.StringResource(key: "Error.System.Navigation.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 导航错误
      static let errorSystemNavigationTitle = Rswift.StringResource(key: "Error.System.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 我的
      static let mine = Rswift.StringResource(key: "Mine", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 收藏
      static let stars = Rswift.StringResource(key: "Stars", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 数据解析异常
      static let errorSystemDataFormatMessage = Rswift.StringResource(key: "Error.System.DataFormat.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 数据解析异常
      static let errorSystemDataFormatTitle = Rswift.StringResource(key: "Error.System.DataFormat.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 是
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昵称
      static let nickname = Rswift.StringResource(key: "Nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 服务异常
      static let errorServerMessage = Rswift.StringResource(key: "Error.Server.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 服务异常
      static let errorServerTitle = Rswift.StringResource(key: "Error.Server.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未知
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未知错误
      static let errorSystemUnknownMessage = Rswift.StringResource(key: "Error.System.Unknown.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未知错误
      static let errorSystemUnknownTitle = Rswift.StringResource(key: "Error.System.Unknown.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 点击登录
      static let clickToLogin = Rswift.StringResource(key: "Click To Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 热门
      static let hot = Rswift.StringResource(key: "Hot", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 用户未登录
      static let errorUserNotLoggedInMessage = Rswift.StringResource(key: "Error.User.NotLoggedIn.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 用户未登录
      static let errorUserNotLoggedInTitle = Rswift.StringResource(key: "Error.User.NotLoggedIn.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 用户登录过期
      static let errorUserLoginExpiredMessage = Rswift.StringResource(key: "Error.User.LoginExpired.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 用户登录过期
      static let errorUserLoginExpiredTitle = Rswift.StringResource(key: "Error.User.LoginExpired.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登录
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登录失败，请稍后重试
      static let errorLogin = Rswift.StringResource(key: "Error.Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确定
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确定
      static let sure = Rswift.StringResource(key: "Sure", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确定退出登录？
      static let alertLogoutMessage = Rswift.StringResource(key: "Alert.Logout.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 简介
      static let bio = Rswift.StringResource(key: "Bio", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 网络错误
      static let errorNetworkMessage = Rswift.StringResource(key: "Error.Network.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 网络错误
      static let errorNetworkTitle = Rswift.StringResource(key: "Error.Network.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置
      static let setting = Rswift.StringResource(key: "Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出
      static let exit = Rswift.StringResource(key: "Exit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出登录
      static let exitLogin = Rswift.StringResource(key: "Exit Login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 重试
      static let errorRetry = Rswift.StringResource(key: "Error.Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 隐私声明：SwiftGithub不会从您的GitHub账户收集任何信息，我甚至连服务器都没有，请您放心使用。
      static let loginPrivacyMessage = Rswift.StringResource(key: "Login.Privacy.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 非法操作
      static let errorAppMessage = Rswift.StringResource(key: "Error.App.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 非法操作
      static let errorAppTitle = Rswift.StringResource(key: "Error.App.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 首页
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Access Token
      static func accessToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Access Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Access Token"
        }

        return NSLocalizedString("Access Token", bundle: bundle, comment: "")
      }

      /// Value: Develop By Swift
      static func loginSlogan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Slogan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Slogan"
        }

        return NSLocalizedString("Login.Slogan", bundle: bundle, comment: "")
      }

      /// Value: Followers
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// Value: Following
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// Value: Joined on %@
      static func joinedOn(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Joined on", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Joined on"
        }

        let format = NSLocalizedString("Joined on", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Let's build from here
      static func appSlogan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App Slogan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App Slogan"
        }

        return NSLocalizedString("App Slogan", bundle: bundle, comment: "")
      }

      /// Value: No Description
      static func noDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Description"
        }

        return NSLocalizedString("No Description", bundle: bundle, comment: "")
      }

      /// Value: No blog provided
      static func noneBlog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Blog"
        }

        return NSLocalizedString("None.Blog", bundle: bundle, comment: "")
      }

      /// Value: No company provided
      static func noneCompany(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Company"
        }

        return NSLocalizedString("None.Company", bundle: bundle, comment: "")
      }

      /// Value: No description provided
      static func noneDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Desc"
        }

        return NSLocalizedString("None.Desc", bundle: bundle, comment: "")
      }

      /// Value: No email provided
      static func noneEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Email"
        }

        return NSLocalizedString("None.Email", bundle: bundle, comment: "")
      }

      /// Value: No hot repository
      static func noneRepo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Repo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Repo"
        }

        return NSLocalizedString("None.Repo", bundle: bundle, comment: "")
      }

      /// Value: No location provided
      static func noneLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Location"
        }

        return NSLocalizedString("None.Location", bundle: bundle, comment: "")
      }

      /// Value: Personal Access Token
      static func loginPersonalToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Personal.Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Personal.Token"
        }

        return NSLocalizedString("Login.Personal.Token", bundle: bundle, comment: "")
      }

      /// Value: Repositores
      static func repositores(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositores", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositores"
        }

        return NSLocalizedString("Repositores", bundle: bundle, comment: "")
      }

      /// Value: Since
      static func since(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Since", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Since"
        }

        return NSLocalizedString("Since", bundle: bundle, comment: "")
      }

      /// Value: 个人主页
      static func blog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blog"
        }

        return NSLocalizedString("Blog", bundle: bundle, comment: "")
      }

      /// Value: 事件
      static func event(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event"
        }

        return NSLocalizedString("Event", bundle: bundle, comment: "")
      }

      /// Value: 仅公开库
      static func loginPrivilegeOnlyPublic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privilege.OnlyPublic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privilege.OnlyPublic"
        }

        return NSLocalizedString("Login.Privilege.OnlyPublic", bundle: bundle, comment: "")
      }

      /// Value: 仓库访问权限选项
      static func loginPrivacyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privacy.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privacy.Title"
        }

        return NSLocalizedString("Login.Privacy.Title", bundle: bundle, comment: "")
      }

      /// Value: 使用GitHub登录
      static func loginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Button.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Button.Title"
        }

        return NSLocalizedString("Login.Button.Title", bundle: bundle, comment: "")
      }

      /// Value: 公开库+私有库
      static func loginPrivilegeWithPrivate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privilege.WithPrivate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privilege.WithPrivate"
        }

        return NSLocalizedString("Login.Privilege.WithPrivate", bundle: bundle, comment: "")
      }

      /// Value: 关于
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// Value: 列表为空
      static func errorSystemListIsEmptyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.ListIsEmpty.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.ListIsEmpty.Message"
        }

        return NSLocalizedString("Error.System.ListIsEmpty.Message", bundle: bundle, comment: "")
      }

      /// Value: 列表为空
      static func errorSystemListIsEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.ListIsEmpty.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.ListIsEmpty.Title"
        }

        return NSLocalizedString("Error.System.ListIsEmpty.Title", bundle: bundle, comment: "")
      }

      /// Value: 反馈
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback"
        }

        return NSLocalizedString("Feedback", bundle: bundle, comment: "")
      }

      /// Value: 取消
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// Value: 否
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// Value: 团队
      static func company(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Company"
        }

        return NSLocalizedString("Company", bundle: bundle, comment: "")
      }

      /// Value: 地点
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// Value: 导航错误
      static func errorSystemNavigationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.Navigation.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.Navigation.Message"
        }

        return NSLocalizedString("Error.System.Navigation.Message", bundle: bundle, comment: "")
      }

      /// Value: 导航错误
      static func errorSystemNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.Navigation.Title"
        }

        return NSLocalizedString("Error.System.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: 我的
      static func mine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mine"
        }

        return NSLocalizedString("Mine", bundle: bundle, comment: "")
      }

      /// Value: 收藏
      static func stars(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stars", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stars"
        }

        return NSLocalizedString("Stars", bundle: bundle, comment: "")
      }

      /// Value: 数据解析异常
      static func errorSystemDataFormatMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.DataFormat.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.DataFormat.Message"
        }

        return NSLocalizedString("Error.System.DataFormat.Message", bundle: bundle, comment: "")
      }

      /// Value: 数据解析异常
      static func errorSystemDataFormatTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.DataFormat.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.DataFormat.Title"
        }

        return NSLocalizedString("Error.System.DataFormat.Title", bundle: bundle, comment: "")
      }

      /// Value: 是
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// Value: 昵称
      static func nickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nickname"
        }

        return NSLocalizedString("Nickname", bundle: bundle, comment: "")
      }

      /// Value: 服务异常
      static func errorServerMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Server.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Server.Message"
        }

        return NSLocalizedString("Error.Server.Message", bundle: bundle, comment: "")
      }

      /// Value: 服务异常
      static func errorServerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Server.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Server.Title"
        }

        return NSLocalizedString("Error.Server.Title", bundle: bundle, comment: "")
      }

      /// Value: 未知
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unknown"
        }

        return NSLocalizedString("Unknown", bundle: bundle, comment: "")
      }

      /// Value: 未知错误
      static func errorSystemUnknownMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.Unknown.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.Unknown.Message"
        }

        return NSLocalizedString("Error.System.Unknown.Message", bundle: bundle, comment: "")
      }

      /// Value: 未知错误
      static func errorSystemUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.System.Unknown.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.System.Unknown.Title"
        }

        return NSLocalizedString("Error.System.Unknown.Title", bundle: bundle, comment: "")
      }

      /// Value: 点击登录
      static func clickToLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Click To Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click To Login"
        }

        return NSLocalizedString("Click To Login", bundle: bundle, comment: "")
      }

      /// Value: 热门
      static func hot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hot"
        }

        return NSLocalizedString("Hot", bundle: bundle, comment: "")
      }

      /// Value: 用户未登录
      static func errorUserNotLoggedInMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoggedIn.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoggedIn.Message"
        }

        return NSLocalizedString("Error.User.NotLoggedIn.Message", bundle: bundle, comment: "")
      }

      /// Value: 用户未登录
      static func errorUserNotLoggedInTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoggedIn.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoggedIn.Title"
        }

        return NSLocalizedString("Error.User.NotLoggedIn.Title", bundle: bundle, comment: "")
      }

      /// Value: 用户登录过期
      static func errorUserLoginExpiredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Message"
        }

        return NSLocalizedString("Error.User.LoginExpired.Message", bundle: bundle, comment: "")
      }

      /// Value: 用户登录过期
      static func errorUserLoginExpiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Title"
        }

        return NSLocalizedString("Error.User.LoginExpired.Title", bundle: bundle, comment: "")
      }

      /// Value: 登录
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// Value: 登录失败，请稍后重试
      static func errorLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Login"
        }

        return NSLocalizedString("Error.Login", bundle: bundle, comment: "")
      }

      /// Value: 确定
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// Value: 确定
      static func sure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sure"
        }

        return NSLocalizedString("Sure", bundle: bundle, comment: "")
      }

      /// Value: 确定退出登录？
      static func alertLogoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Logout.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Logout.Message"
        }

        return NSLocalizedString("Alert.Logout.Message", bundle: bundle, comment: "")
      }

      /// Value: 简介
      static func bio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bio", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bio"
        }

        return NSLocalizedString("Bio", bundle: bundle, comment: "")
      }

      /// Value: 网络错误
      static func errorNetworkMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.Message"
        }

        return NSLocalizedString("Error.Network.Message", bundle: bundle, comment: "")
      }

      /// Value: 网络错误
      static func errorNetworkTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.Title"
        }

        return NSLocalizedString("Error.Network.Title", bundle: bundle, comment: "")
      }

      /// Value: 设置
      static func setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Setting"
        }

        return NSLocalizedString("Setting", bundle: bundle, comment: "")
      }

      /// Value: 退出
      static func exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit"
        }

        return NSLocalizedString("Exit", bundle: bundle, comment: "")
      }

      /// Value: 退出登录
      static func exitLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit Login"
        }

        return NSLocalizedString("Exit Login", bundle: bundle, comment: "")
      }

      /// Value: 重试
      static func errorRetry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Retry", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Retry"
        }

        return NSLocalizedString("Error.Retry", bundle: bundle, comment: "")
      }

      /// Value: 隐私声明：SwiftGithub不会从您的GitHub账户收集任何信息，我甚至连服务器都没有，请您放心使用。
      static func loginPrivacyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privacy.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privacy.Message"
        }

        return NSLocalizedString("Login.Privacy.Message", bundle: bundle, comment: "")
      }

      /// Value: 非法操作
      static func errorAppMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Message"
        }

        return NSLocalizedString("Error.App.Message", bundle: bundle, comment: "")
      }

      /// Value: 非法操作
      static func errorAppTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Title"
        }

        return NSLocalizedString("Error.App.Title", bundle: bundle, comment: "")
      }

      /// Value: 首页
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
